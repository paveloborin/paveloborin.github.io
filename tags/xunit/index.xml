<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>xUnit on Pavel Oborin</title>
    <link>https://pavel.oborin.me/tags/xunit/</link>
    <description>Recent content in xUnit on Pavel Oborin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-RU</language>
    <lastBuildDate>Mon, 04 Jun 2018 15:41:57 +0500</lastBuildDate>
    
	<atom:link href="https://pavel.oborin.me/tags/xunit/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Стратегия очагового внедрения автотестов. Часть II: Концепция очаговой модели. Очаговая модель, как паттерн распространения тестов в системе</title>
      <link>https://pavel.oborin.me/posts/tests-part2/</link>
      <pubDate>Mon, 04 Jun 2018 15:41:57 +0500</pubDate>
      
      <guid>https://pavel.oborin.me/posts/tests-part2/</guid>
      <description>Вернуться к первой части
Концепция очаговой модели внедрения тестов В своей зметке я не ставлю перед собой цели осветить все вопросы и ошибки при встраивании тестов в уже работающую систему. Основная моя задача обсудить такую распространенную ошибку как применение «тактики единого центра» при добавлении тестов в систему, когда код всех подсистем переносится, прирастая к некой единой базе.
Рассмотрим пример. Допустим у вас есть три подсистемы:
 Система А: полностью покрыта тестами, своеобразный эталон; Система Б: система с большой долей легаси кода, частично покрыта тестами; Система В: очень древний код, но при этом активно задействованный.</description>
    </item>
    
    <item>
      <title>Стратегия очагового внедрения автотестов. Часть I: О роли тестирования</title>
      <link>https://pavel.oborin.me/posts/tests-part1/</link>
      <pubDate>Fri, 01 Jun 2018 18:43:57 +0500</pubDate>
      
      <guid>https://pavel.oborin.me/posts/tests-part1/</guid>
      <description>Вступление Сегодня тестирование при разработке программного обеспечения переместилось с некогда периферийных позиций на первый план, превратившись в одну из ее центральных частей. Если брать во внимание огромную сложность современных программных продуктов, то автотесты - это едва ли не единственная причина почему разработчики еще могут спокойно спать по ночам. Между тем для большинства разработчиков обучение написанию тестов до сих пор остается второстепенной задачей.
Среди множества обучающих ресурсов на любой вкус: по ООП, разработке, рефакторингу и тд, можно прокачать свои скилы в программировании, но, как только речь заходит о тестировании каждый остается практически наедине с самим собой.</description>
    </item>
    
  </channel>
</rss>